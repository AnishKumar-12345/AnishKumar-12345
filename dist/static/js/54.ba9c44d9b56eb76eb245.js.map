{"version":3,"sources":["webpack:///./node_modules/dompurify/dist/purify.js"],"names":["factory","hasOwnProperty","Object","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","freeze","seal","create","_ref","Reflect","apply","construct","fun","thisValue","args","x","Func","Function","prototype","bind","concat","arr","Array","isArray","i","arr2","length","from","_toConsumableArray","func","arrayForEach","unapply","forEach","arrayPop","pop","arrayPush","push","stringToLowerCase","String","toLowerCase","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","trim","regExpTest","RegExp","test","typeErrorCreate","TypeError","_len2","arguments","_key2","thisArg","_len","_key","addToSet","set","array","l","element","lcElement","clone","object","newObject","property","lookupGetter","prop","desc","get","value","console","warn","html","svg","svgFilters","svgDisallowed","mathMl","mathMlDisallowed","text","html$1","svg$1","mathMl$1","xml","MUSTACHE_EXPR","ERB_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","_typeof","Symbol","iterator","obj","constructor","_toConsumableArray$1","getGlobal","window","_createTrustedTypesPolicy","trustedTypes","document","createPolicy","suffix","currentScript","hasAttribute","getAttribute","policyName","createHTML","html$$1","_","createDOMPurify","undefined","DOMPurify","root","version","removed","nodeType","isSupported","originalDocument","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","_window$NamedNodeMap","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","trustedTypesPolicy","emptyHTML","RETURN_TRUSTED_TYPE","_document","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","documentMode","hooks","createHTMLDocument","MUSTACHE_EXPR$$1","ERB_EXPR$$1","DATA_ATTR$$1","ARIA_ATTR$$1","IS_SCRIPT_OR_DATA$$1","ATTR_WHITESPACE$$1","IS_ALLOWED_URI$$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","SANITIZE_DOM","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","transformCaseFunc","CONFIG","formElement","isRegexOrFunction","testValue","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","_forceRemove","node","parentNode","removeChild","outerHTML","remove","_removeAttribute","name","attribute","getAttributeNode","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","_isNode","nodeName","_executeHook","entryPoint","currentNode","data","hook","_sanitizeElements","elm","textContent","attributes","namespaceURI","tagName","allowedTags","firstElementChild","_basicCustomElementTest","parent","parentTagName","Boolean","commonSvgAndHTMLElements","_checkValidNamespace","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","attr","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","_attr","forceKeepAttr","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","oldNode","returnNode","toString","toStaticHTML","appendChild","firstChild","nodeIterator","shadowroot","serializedHTML","setConfig","clearConfig","isValidAttribute","tag","addHook","hookFunction","removeHook","removeHooks","removeAllHooks","module","exports"],"mappings":";2LAEA,IAAAA,IAIC,WAAoB,aAIrB,IAAAC,EAAAC,OAAAD,eACAE,EAAAD,OAAAC,eACAC,EAAAF,OAAAE,SACAC,EAAAH,OAAAG,eACAC,EAAAJ,OAAAI,yBACAC,EAAAL,OAAAK,OACAC,EAAAN,OAAAM,KACAC,EAAAP,OAAAO,OAEAC,EAAA,oBAAAC,iBACAC,EAAAF,EAAAE,MACAC,EAAAH,EAAAG,UAEAD,IACAA,EAAA,SAAAE,EAAAC,EAAAC,GACA,OAAAF,EAAAF,MAAAG,EAAAC,KAIAT,IACAA,EAAA,SAAAU,GACA,OAAAA,IAIAT,IACAA,EAAA,SAAAS,GACA,OAAAA,IAIAJ,IACAA,EAAA,SAAAK,EAAAF,GACA,WAAAG,SAAAC,UAAAC,KAAAT,MAAAM,GAAA,MAAAI,OAnCA,SAAAC,GAAoC,GAAAC,MAAAC,QAAAF,GAAA,CAA0B,QAAAG,EAAA,EAAAC,EAAAH,MAAAD,EAAAK,QAA0CF,EAAAH,EAAAK,OAAgBF,IAAOC,EAAAD,GAAAH,EAAAG,GAAoB,OAAAC,EAAsB,OAAAH,MAAAK,KAAAN,GAmCzKO,CAAAd,QAIA,IAwBAe,EAxBAC,EAAAC,EAAAT,MAAAJ,UAAAc,SACAC,EAAAF,EAAAT,MAAAJ,UAAAgB,KACAC,EAAAJ,EAAAT,MAAAJ,UAAAkB,MAEAC,EAAAN,EAAAO,OAAApB,UAAAqB,aACAC,EAAAT,EAAAO,OAAApB,UAAAuB,OACAC,EAAAX,EAAAO,OAAApB,UAAAyB,SACAC,EAAAb,EAAAO,OAAApB,UAAA2B,SACAC,EAAAf,EAAAO,OAAApB,UAAA6B,MAEAC,EAAAjB,EAAAkB,OAAA/B,UAAAgC,MAEAC,GAYAtB,EAZAuB,UAaA,WACA,QAAAC,EAAAC,UAAA5B,OAAAZ,EAAAQ,MAAA+B,GAAAE,EAAA,EAAwEA,EAAAF,EAAeE,IACvFzC,EAAAyC,GAAAD,UAAAC,GAGA,OAAA5C,EAAAkB,EAAAf,KAhBA,SAAAiB,EAAAF,GACA,gBAAA2B,GACA,QAAAC,EAAAH,UAAA5B,OAAAZ,EAAAQ,MAAAmC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAwFA,EAAAD,EAAaC,IACrG5C,EAAA4C,EAAA,GAAAJ,UAAAI,GAGA,OAAAhD,EAAAmB,EAAA2B,EAAA1C,IAeA,SAAA6C,EAAAC,EAAAC,GACA5D,GAIAA,EAAA2D,EAAA,MAIA,IADA,IAAAE,EAAAD,EAAAnC,OACAoC,KAAA,CACA,IAAAC,EAAAF,EAAAC,GACA,oBAAAC,EAAA,CACA,IAAAC,EAAA3B,EAAA0B,GACAC,IAAAD,IAEA7D,EAAA2D,KACAA,EAAAC,GAAAE,GAGAD,EAAAC,GAIAJ,EAAAG,IAAA,EAGA,OAAAH,EAIA,SAAAK,EAAAC,GACA,IAAAC,EAAA5D,EAAA,MAEA6D,OAAA,EACA,IAAAA,KAAAF,EACAxD,EAAAX,EAAAmE,GAAAE,MACAD,EAAAC,GAAAF,EAAAE,IAIA,OAAAD,EAOA,SAAAE,EAAAH,EAAAI,GACA,YAAAJ,GAAA,CACA,IAAAK,EAAAnE,EAAA8D,EAAAI,GACA,GAAAC,EAAA,CACA,GAAAA,EAAAC,IACA,OAAAzC,EAAAwC,EAAAC,KAGA,sBAAAD,EAAAE,MACA,OAAA1C,EAAAwC,EAAAE,OAIAP,EAAA/D,EAAA+D,GAQA,OALA,SAAAH,GAEA,OADAW,QAAAC,KAAA,qBAAAZ,GACA,MAMA,IAAAa,EAAAvE,GAAA,s2BAGAwE,EAAAxE,GAAA,2ZAEAyE,EAAAzE,GAAA,qVAMA0E,EAAA1E,GAAA,0RAEA2E,EAAA3E,GAAA,0PAIA4E,EAAA5E,GAAA,2KAEA6E,EAAA7E,GAAA,UAEA8E,EAAA9E,GAAA,+iCAEA+E,EAAA/E,GAAA,ujEAEAgF,EAAAhF,GAAA,0lBAEAiF,EAAAjF,GAAA,gEAGAkF,EAAAjF,EAAA,6BACAkF,EAAAlF,EAAA,yBACAmF,EAAAnF,EAAA,8BACAoF,EAAApF,EAAA,kBACAqF,EAAArF,EAAA,yFAEAsF,EAAAtF,EAAA,yBACAuF,EAAAvF,EAAA,+DAGAwF,EAAA,mBAAAC,QAAA,iBAAAA,OAAAC,SAAA,SAAAC,GAAsG,cAAAA,GAAqB,SAAAA,GAAmB,OAAAA,GAAA,mBAAAF,QAAAE,EAAAC,cAAAH,QAAAE,IAAAF,OAAA7E,UAAA,gBAAA+E,GAE9I,SAAAE,EAAA9E,GAAsC,GAAAC,MAAAC,QAAAF,GAAA,CAA0B,QAAAG,EAAA,EAAAC,EAAAH,MAAAD,EAAAK,QAA0CF,EAAAH,EAAAK,OAAgBF,IAAOC,EAAAD,GAAAH,EAAAG,GAAoB,OAAAC,EAAsB,OAAAH,MAAAK,KAAAN,GAE3K,IAAA+E,EAAA,WACA,0BAAAC,OAAA,KAAAA,QAWAC,EAAA,SAAAC,EAAAC,GACA,wBAAAD,EAAA,YAAAT,EAAAS,KAAA,mBAAAA,EAAAE,aACA,YAMA,IAAAC,EAAA,KAEAF,EAAAG,eAAAH,EAAAG,cAAAC,aADA,2BAEAF,EAAAF,EAAAG,cAAAE,aAFA,0BAKA,IAAAC,EAAA,aAAAJ,EAAA,IAAAA,EAAA,IAEA,IACA,OAAAH,EAAAE,aAAAK,GACAC,WAAA,SAAAC,GACA,OAAAA,KAGK,MAAAC,GAKL,OADAvC,QAAAC,KAAA,uBAAAmC,EAAA,0BACA,OAkrCA,OA9qCA,SAAAI,IACA,IAAAb,EAAA/C,UAAA5B,OAAA,QAAAyF,IAAA7D,UAAA,GAAAA,UAAA,GAAA8C,IAEAgB,EAAA,SAAAC,GACA,OAAAH,EAAAG,IAeA,GARAD,EAAAE,QAAA,QAMAF,EAAAG,YAEAlB,MAAAG,UAAA,IAAAH,EAAAG,SAAAgB,SAKA,OAFAJ,EAAAK,aAAA,EAEAL,EAGA,IAAAM,EAAArB,EAAAG,SAEAA,EAAAH,EAAAG,SACAmB,EAAAtB,EAAAsB,iBACAC,EAAAvB,EAAAuB,oBACAC,EAAAxB,EAAAwB,KACAC,EAAAzB,EAAAyB,QACAC,EAAA1B,EAAA0B,WACAC,EAAA3B,EAAA4B,aACAA,OAAAd,IAAAa,EAAA3B,EAAA4B,cAAA5B,EAAA6B,gBAAAF,EACAG,EAAA9B,EAAA8B,gBACAC,EAAA/B,EAAA+B,UACA7B,EAAAF,EAAAE,aAGA8B,EAAAP,EAAA5G,UAEAoH,EAAAjE,EAAAgE,EAAA,aACAE,EAAAlE,EAAAgE,EAAA,eACAG,GAAAnE,EAAAgE,EAAA,cACAI,GAAApE,EAAAgE,EAAA,cAQA,sBAAAT,EAAA,CACA,IAAAc,GAAAlC,EAAAmC,cAAA,YACAD,GAAAE,SAAAF,GAAAE,QAAAC,gBACArC,EAAAkC,GAAAE,QAAAC,eAIA,IAAAC,GAAAxC,EAAAC,EAAAmB,GACAqB,GAAAD,IAAAE,GAAAF,GAAA/B,WAAA,OAEAkC,GAAAzC,EACA0C,GAAAD,GAAAC,eACAC,GAAAF,GAAAE,mBACAC,GAAAH,GAAAG,uBACAC,GAAAJ,GAAAI,qBACAC,GAAA5B,EAAA4B,WAGAC,MACA,IACAA,GAAAtF,EAAAuC,GAAA+C,aAAA/C,EAAA+C,gBACK,MAAAtC,IAEL,IAAAuC,MAKApC,EAAAK,YAAA,mBAAAgB,IAAAS,SAAA,IAAAA,GAAAO,oBAAA,IAAAF,GAEA,IAAAG,GAAAnE,EACAoE,GAAAnE,EACAoE,GAAAnE,EACAoE,GAAAnE,EACAoE,GAAAlE,EACAmE,GAAAlE,EACAmE,GAAArE,EASAsE,GAAA,KACAC,GAAAvG,QAA0CvC,OAAA+E,EAAAvB,GAAAuB,EAAAtB,GAAAsB,EAAArB,GAAAqB,EAAAnB,GAAAmB,EAAAjB,KAG1CiF,GAAA,KACAC,GAAAzG,QAA0CvC,OAAA+E,EAAAhB,GAAAgB,EAAAf,GAAAe,EAAAd,GAAAc,EAAAb,KAQ1C+E,GAAArK,OAAAM,KAAAN,OAAAO,OAAA,MACA+J,cACAC,UAAA,EACAC,cAAA,EACAC,YAAA,EACAhG,MAAA,MAEAiG,oBACAH,UAAA,EACAC,cAAA,EACAC,YAAA,EACAhG,MAAA,MAEAkG,gCACAJ,UAAA,EACAC,cAAA,EACAC,YAAA,EACAhG,OAAA,MAKAmG,GAAA,KAGAC,GAAA,KAGAC,IAAA,EAGAC,IAAA,EAGAC,IAAA,EAKAC,IAAA,EAGAC,IAAA,EAGAC,IAAA,EAIAC,IAAA,EAMAC,IAAA,EAIAC,IAAA,EAIAtC,IAAA,EAGAuC,IAAA,EAGAC,IAAA,EAIAC,IAAA,EAGAC,MAGAC,GAAA,KACAC,GAAAjI,MAA6C,4NAG7CkI,GAAA,KACAC,GAAAnI,MAA2C,iDAG3CoI,GAAA,KACAC,GAAArI,MAAiD,mHAEjDsI,GAAA,qCACAC,GAAA,6BACAC,GAAA,+BAEAC,GAAAD,GACAE,IAAA,EAGAC,QAAA,EACAC,IAAA,qCAEAC,QAAA,EAGAC,GAAA,KAKAC,GAAAlG,EAAAmC,cAAA,QAEAgE,GAAA,SAAAC,GACA,OAAAA,aAAA3J,QAAA2J,aAAA3L,UASA4L,GAAA,SAAAC,GACAL,SAAAK,IAKAA,GAAA,qBAAAA,EAAA,YAAAhH,EAAAgH,MACAA,MAIAA,EAAA7I,EAAA6I,GAGA7C,GAAA,iBAAA6C,EAAAnJ,KAAwDmJ,EAAA7C,cAAAC,GACxDC,GAAA,iBAAA2C,EAAAnJ,KAAwDmJ,EAAA3C,cAAAC,GACxD2B,GAAA,sBAAAe,EAAAnJ,EAAAM,EAAA+H,IAAAc,EAAAC,mBAAAf,GACAH,GAAA,sBAAAiB,EAAAnJ,EAAAM,EAAA6H,IAAAgB,EAAAE,mBAAAlB,GACAH,GAAA,oBAAAmB,EAAAnJ,KAA8DmJ,EAAAnB,iBAAAC,GAC9DhB,GAAA,gBAAAkC,EAAAnJ,KAAsDmJ,EAAAlC,gBACtDC,GAAA,gBAAAiC,EAAAnJ,KAAsDmJ,EAAAjC,gBACtDa,GAAA,iBAAAoB,KAAApB,aACAZ,IAAA,IAAAgC,EAAAhC,gBACAC,IAAA,IAAA+B,EAAA/B,gBACAC,GAAA8B,EAAA9B,0BAAA,EACAC,GAAA6B,EAAA7B,qBAAA,EACAC,GAAA4B,EAAA5B,iBAAA,EACAG,GAAAyB,EAAAzB,aAAA,EACAC,GAAAwB,EAAAxB,sBAAA,EACAtC,GAAA8D,EAAA9D,sBAAA,EACAoC,GAAA0B,EAAA1B,aAAA,EACAG,IAAA,IAAAuB,EAAAvB,aACAC,IAAA,IAAAsB,EAAAtB,aACAC,GAAAqB,EAAArB,WAAA,EACAzB,GAAA8C,EAAAG,oBAAAjD,GACAoC,GAAAU,EAAAV,WAAAD,GACAW,EAAAzC,yBAAAsC,GAAAG,EAAAzC,wBAAAC,gBACAD,GAAAC,aAAAwC,EAAAzC,wBAAAC,cAGAwC,EAAAzC,yBAAAsC,GAAAG,EAAAzC,wBAAAK,sBACAL,GAAAK,mBAAAoC,EAAAzC,wBAAAK,oBAGAoC,EAAAzC,yBAAA,kBAAAyC,EAAAzC,wBAAAM,iCACAN,GAAAM,+BAAAmC,EAAAzC,wBAAAM,gCAGA2B,GAEAA,IAAA,IAAAC,GAAA1J,QAAAiK,EAAAR,mBAvEA,YAuEAQ,EAAAR,kBAGAE,GAAA,0BAAAF,GAAA,SAAAvL,GACA,OAAAA,GACOsB,EAEP4I,KACAF,IAAA,GAGAO,KACAD,IAAA,GAIAK,KACAzB,GAAAtG,QAAkCvC,OAAA+E,EAAAjB,KAClCiF,OACA,IAAAuB,GAAA9G,OACAjB,EAAAsG,GAAArF,GACAjB,EAAAwG,GAAAhF,KAGA,IAAAuG,GAAA7G,MACAlB,EAAAsG,GAAApF,GACAlB,EAAAwG,GAAA/E,GACAzB,EAAAwG,GAAA7E,KAGA,IAAAoG,GAAA5G,aACAnB,EAAAsG,GAAAnF,GACAnB,EAAAwG,GAAA/E,GACAzB,EAAAwG,GAAA7E,KAGA,IAAAoG,GAAA1G,SACArB,EAAAsG,GAAAjF,GACArB,EAAAwG,GAAA9E,GACA1B,EAAAwG,GAAA7E,KAKAwH,EAAAI,WACAjD,KAAAC,KACAD,GAAAhG,EAAAgG,KAGAtG,EAAAsG,GAAA6C,EAAAI,WAGAJ,EAAAK,WACAhD,KAAAC,KACAD,GAAAlG,EAAAkG,KAGAxG,EAAAwG,GAAA2C,EAAAK,WAGAL,EAAAC,mBACApJ,EAAAoI,GAAAe,EAAAC,mBAGAD,EAAAnB,kBACAA,KAAAC,KACAD,GAAA1H,EAAA0H,KAGAhI,EAAAgI,GAAAmB,EAAAnB,kBAIAH,KACAvB,GAAA,aAIAiB,IACAvH,EAAAsG,IAAA,uBAIAA,GAAAmD,QACAzJ,EAAAsG,IAAA,iBACAW,GAAAyC,OAKAhN,GACAA,EAAAyM,GAGAL,GAAAK,IAGAQ,GAAA3J,MAAoD,8BAEpD4J,GAAA5J,MAA6C,kDAK7C6J,GAAA7J,KAAkCkB,GAClClB,EAAA6J,GAAA1I,GACAnB,EAAA6J,GAAAzI,GAEA,IAAA0I,GAAA9J,KAAqCqB,GACrCrB,EAAA8J,GAAAxI,GAUA,IAwFAyI,GAAA,SAAAC,GACAxL,EAAAiF,EAAAG,SAAoCxD,QAAA4J,IACpC,IAEAA,EAAAC,WAAAC,YAAAF,GACO,MAAA1G,GACP,IACA0G,EAAAG,UAAA/E,GACS,MAAA9B,GACT0G,EAAAI,YAWAC,GAAA,SAAAC,EAAAN,GACA,IACAxL,EAAAiF,EAAAG,SACA2G,UAAAP,EAAAQ,iBAAAF,GACAtM,KAAAgM,IAEO,MAAA1G,GACP9E,EAAAiF,EAAAG,SACA2G,UAAA,KACAvM,KAAAgM,IAOA,GAHAA,EAAAS,gBAAAH,GAGA,OAAAA,IAAA9D,GAAA8D,GACA,GAAA5C,IAAAC,GACA,IACAoC,GAAAC,GACW,MAAA1G,SAEX,IACA0G,EAAAU,aAAAJ,EAAA,IACW,MAAAhH,MAWXqH,GAAA,SAAAC,GAEA,IAAAC,OAAA,EACAC,OAAA,EAEA,GAAArD,GACAmD,EAAA,oBAAAA,MACO,CAEP,IAAAG,EAAAlM,EAAA+L,EAAA,eACAE,EAAAC,KAAA,GAGA,0BAAApC,KAEAiC,EAAA,iEAAAA,EAAA,kBAGA,IAAAI,EAAA7F,MAAA/B,WAAAwH,KAKA,GAAAnC,KAAAD,GACA,IACAqC,GAAA,IAAApG,GAAAwG,gBAAAD,EAAArC,IACS,MAAArF,IAIT,IAAAuH,MAAAK,gBAAA,CACAL,EAAAtF,GAAA4F,eAAA1C,GAAA,iBACA,IACAoC,EAAAK,gBAAAE,UAAA1C,GAAA,GAAAsC,EACS,MAAA1H,KAKT,IAAA+H,EAAAR,EAAAQ,MAAAR,EAAAK,gBAOA,OALAN,GAAAE,GACAO,EAAAC,aAAAzI,EAAA0I,eAAAT,GAAAO,EAAAG,WAAA,UAIA/C,KAAAD,GACA9C,GAAA+F,KAAAZ,EAAAtD,GAAA,kBAGAA,GAAAsD,EAAAK,gBAAAG,GASAK,GAAA,SAAAhI,GACA,OAAA8B,GAAAiG,KAAA/H,EAAAwB,eAAAxB,IAAAU,EAAAuH,aAAAvH,EAAAwH,aAAAxH,EAAAyH,UAAA,UAmBAC,GAAA,SAAAvL,GACA,2BAAA2D,EAAA,YAAA/B,EAAA+B,IAAA3D,aAAA2D,EAAA3D,GAAA,qBAAAA,EAAA,YAAA4B,EAAA5B,KAAA,iBAAAA,EAAAsD,UAAA,iBAAAtD,EAAAwL,UAWAC,GAAA,SAAAC,EAAAC,EAAAC,GACAtG,GAAAoG,IAIA9N,EAAA0H,GAAAoG,GAAA,SAAAG,GACAA,EAAAX,KAAAhI,EAAAyI,EAAAC,EAAArD,OAcAuD,GAAA,SAAAH,GACA,IA3CAI,EA2CArH,OAAA,EAMA,GAHA+G,GAAA,yBAAAE,EAAA,OA9CAI,EAiDAJ,aAhDA1H,IAAA,iBAAA8H,EAAAP,UAAA,iBAAAO,EAAAC,aAAA,mBAAAD,EAAApC,eAAAoC,EAAAE,sBAAAlI,IAAA,mBAAAgI,EAAA7B,iBAAA,mBAAA6B,EAAA5B,cAAA,iBAAA4B,EAAAG,cAAA,mBAAAH,EAAAhB,cAkDA,OADAvB,GAAAmC,IACA,EAIA,GAAArN,EAAAqN,EAAAH,SAAA,mBAEA,OADAhC,GAAAmC,IACA,EAIA,IAAAQ,EAAA7D,GAAAqD,EAAAH,UASA,GANAC,GAAA,sBAAAE,GACAQ,UACAC,YAAArG,MAIAwF,GAAAI,EAAAU,sBAAAd,GAAAI,EAAAjH,WAAA6G,GAAAI,EAAAjH,QAAA2H,qBAAAvN,EAAA,UAAA6M,EAAAd,YAAA/L,EAAA,UAAA6M,EAAAK,aAEA,OADAxC,GAAAmC,IACA,EAIA,cAAAQ,GAAArN,EAAA,aAAA6M,EAAAd,WAEA,OADArB,GAAAmC,IACA,EAIA,IAAA5F,GAAAoG,IAAAzF,GAAAyF,GAAA,CAEA,GAAA7E,KAAAG,GAAA0E,GAAA,CACA,IAAAzC,EAAAnF,GAAAoH,MAAAjC,WACAuB,EAAA3G,GAAAqH,MAAAV,WAEA,GAAAA,GAAAvB,EAGA,IAFA,IAEApM,EAFA2N,EAAAzN,OAEA,EAAwCF,GAAA,IAAQA,EAChDoM,EAAAqB,aAAA3G,EAAA6G,EAAA3N,IAAA,GAAA+G,EAAAsH,IAKA,IAAAjF,GAAAyF,IAAAG,GAAAH,GAAA,CACA,GAAAhG,GAAAC,wBAAArH,QAAAD,EAAAqH,GAAAC,aAAA+F,GAAA,SACA,GAAAhG,GAAAC,wBAAArJ,UAAAoJ,GAAAC,aAAA+F,GAAA,SAIA,OADA3C,GAAAmC,IACA,EAIA,OAAAA,aAAA/H,IA/TA,SAAA/D,GACA,IAAA0M,EAAAhI,GAAA1E,GAIA0M,KAAAJ,UACAI,GACAL,aAAAjE,GACAkE,QAAA,aAIA,IAAAA,EAAAhO,EAAA0B,EAAAsM,SACAK,EAAArO,EAAAoO,EAAAJ,SAEA,GAAAtM,EAAAqM,eAAAlE,GAIA,OAAAuE,EAAAL,eAAAjE,GACA,QAAAkE,EAMAI,EAAAL,eAAAnE,GACA,QAAAoE,IAAA,mBAAAK,GAAApD,GAAAoD,IAKAC,QAAAnD,GAAA6C,IAGA,GAAAtM,EAAAqM,eAAAnE,GAIA,OAAAwE,EAAAL,eAAAjE,GACA,SAAAkE,EAKAI,EAAAL,eAAAlE,GACA,SAAAmE,GAAA9C,GAAAmD,GAKAC,QAAAlD,GAAA4C,IAGA,GAAAtM,EAAAqM,eAAAjE,GAAA,CAIA,GAAAsE,EAAAL,eAAAlE,KAAAqB,GAAAmD,GACA,SAGA,GAAAD,EAAAL,eAAAnE,KAAAqB,GAAAoD,GACA,SAOA,IAAAE,EAAAjN,MAAkD,sCAIlD,OAAA8J,GAAA4C,KAAAO,EAAAP,KAAA7C,GAAA6C,IAMA,SA+OAQ,CAAAhB,IACAnC,GAAAmC,IACA,GAGA,aAAAQ,GAAA,YAAAA,IAAArN,EAAA,uBAAA6M,EAAAd,YAMA9D,IAAA,IAAA4E,EAAArI,WAEAoB,EAAAiH,EAAAK,YACAtH,EAAAlG,EAAAkG,EAAAc,GAAA,KACAd,EAAAlG,EAAAkG,EAAAe,GAAA,KACAkG,EAAAK,cAAAtH,IACAzG,EAAAiF,EAAAG,SAAwCxD,QAAA8L,EAAAvH,cACxCuH,EAAAK,YAAAtH,IAKA+G,GAAA,wBAAAE,EAAA,OAEA,IAnBAnC,GAAAmC,IACA,IA8BAiB,GAAA,SAAAC,EAAAC,EAAAvM,GAEA,GAAA8G,KAAA,OAAAyF,GAAA,SAAAA,KAAAvM,KAAA+B,GAAA/B,KAAAiI,IACA,SAOA,GAAA3B,KAAAF,GAAAmG,IAAAhO,EAAA4G,GAAAoH,SAAwF,GAAAlG,IAAA9H,EAAA6G,GAAAmH,SAAgE,IAAA7G,GAAA6G,IAAAnG,GAAAmG,IACxJ,KAIAR,GAAAO,KAAA1G,GAAAC,wBAAArH,QAAAD,EAAAqH,GAAAC,aAAAyG,IAAA1G,GAAAC,wBAAArJ,UAAAoJ,GAAAC,aAAAyG,MAAA1G,GAAAK,8BAAAzH,QAAAD,EAAAqH,GAAAK,mBAAAsG,IAAA3G,GAAAK,8BAAAzJ,UAAAoJ,GAAAK,mBAAAsG,KAGA,OAAAA,GAAA3G,GAAAM,iCAAAN,GAAAC,wBAAArH,QAAAD,EAAAqH,GAAAC,aAAA7F,IAAA4F,GAAAC,wBAAArJ,UAAAoJ,GAAAC,aAAA7F,KACA,cAGO,GAAAsH,GAAAiF,SAAwC,GAAAhO,EAAAgH,GAAAtH,EAAA+B,EAAAsF,GAAA,WAAwF,WAAAiH,GAAA,eAAAA,GAAA,SAAAA,GAAA,WAAAD,GAAA,IAAAnO,EAAA6B,EAAA,WAAAoH,GAAAkF,GAAoK,GAAA/F,KAAAhI,EAAA8G,GAAApH,EAAA+B,EAAAsF,GAAA,WAAuH,GAAAtF,EACla,SAGA,UASA+L,GAAA,SAAAH,GACA,OAAAA,EAAAxN,QAAA,QAaAoO,GAAA,SAAApB,GACA,IAAAqB,OAAA,EACAzM,OAAA,EACAuM,OAAA,EACAlN,OAAA,EAEA6L,GAAA,2BAAAE,EAAA,MAEA,IAAAM,EAAAN,EAAAM,WAIA,GAAAA,EAAA,CAIA,IAAAgB,GACAC,SAAA,GACAC,UAAA,GACAC,UAAA,EACAC,kBAAApH,IAKA,IAHArG,EAAAqM,EAAAzO,OAGAoC,KAAA,CAEA,IAAA0N,EADAN,EAAAf,EAAArM,GAEAmK,EAAAuD,EAAAvD,KACAmC,EAAAoB,EAAApB,aAaA,GAXA3L,EAAA3B,EAAAoO,EAAAzM,OACAuM,EAAAxE,GAAAyB,GAGAkD,EAAAC,SAAAJ,EACAG,EAAAE,UAAA5M,EACA0M,EAAAG,UAAA,EACAH,EAAAM,mBAAAtK,EACAwI,GAAA,wBAAAE,EAAAsB,GACA1M,EAAA0M,EAAAE,WAEAF,EAAAM,gBAKAzD,GAAAC,EAAA4B,GAGAsB,EAAAG,UAKA,GAAAtO,EAAA,OAAAyB,GACAuJ,GAAAC,EAAA4B,OADA,CAMA5E,KACAxG,EAAA/B,EAAA+B,EAAAiF,GAAA,KACAjF,EAAA/B,EAAA+B,EAAAkF,GAAA,MAIA,IAAAoH,EAAAvE,GAAAqD,EAAAH,UACA,GAAAoB,GAAAC,EAAAC,EAAAvM,GAKA,IACA2L,EACAP,EAAA6B,eAAAtB,EAAAnC,EAAAxJ,GAGAoL,EAAAxB,aAAAJ,EAAAxJ,GAGAxC,EAAAmF,EAAAG,SACS,MAAAN,MAIT0I,GAAA,0BAAAE,EAAA,QAQA8B,GAAA,SAAAA,EAAAC,GACA,IAAAC,OAAA,EACAC,EAAAzC,GAAAuC,GAKA,IAFAjC,GAAA,0BAAAiC,EAAA,MAEAC,EAAAC,EAAAC,YAEApC,GAAA,yBAAAkC,EAAA,MAGA7B,GAAA6B,KAKAA,EAAAjJ,mBAAAjB,GACAgK,EAAAE,EAAAjJ,SAIAqI,GAAAY,IAIAlC,GAAA,yBAAAiC,EAAA,OAyQA,OA9PAxK,EAAA4K,SAAA,SAAAzD,EAAAzB,GACA,IAAAkC,OAAA,EACAiD,OAAA,EACApC,OAAA,EACAqC,OAAA,EACAC,OAAA,EAUA,IANA9F,IAAAkC,KAEAA,EAAA,eAIA,iBAAAA,IAAAkB,GAAAlB,GAAA,CAEA,sBAAAA,EAAA6D,SACA,MAAAjP,EAAA,8BAGA,oBADAoL,IAAA6D,YAEA,MAAAjP,EAAA,mCAMA,IAAAiE,EAAAK,YAAA,CACA,cAAA3B,EAAAO,EAAAgM,eAAA,mBAAAhM,EAAAgM,aAAA,CACA,oBAAA9D,EACA,OAAAlI,EAAAgM,aAAA9D,GAGA,GAAAkB,GAAAlB,GACA,OAAAlI,EAAAgM,aAAA9D,EAAAT,WAIA,OAAAS,EAgBA,GAZApD,IACA0B,GAAAC,GAIA1F,EAAAG,WAGA,iBAAAgH,IACA9C,IAAA,GAGAA,SAAqB,GAAA8C,aAAA1G,EAKrB,KADAoK,GADAjD,EAAAV,GAAA,kBACAzF,cAAAS,WAAAiF,GAAA,IACA/G,UAAA,SAAAyK,EAAAvC,SAEAV,EAAAiD,EACS,SAAAA,EAAAvC,SACTV,EAAAiD,EAGAjD,EAAAsD,YAAAL,OAEO,CAEP,IAAA5G,KAAAJ,KAAAC,KAEA,IAAAqD,EAAA1L,QAAA,KACA,OAAAiG,IAAAE,GAAAF,GAAA/B,WAAAwH,KAOA,KAHAS,EAAAV,GAAAC,IAIA,OAAAlD,GAAA,KAAAtC,GAKAiG,GAAA5D,IACAsC,GAAAsB,EAAAuD,YAOA,IAHA,IAAAC,EAAAnD,GAAA5D,GAAA8C,EAAAS,GAGAa,EAAA2C,EAAAT,YAEA,IAAAlC,EAAArI,UAAAqI,IAAAqC,GAKAlC,GAAAH,KAKAA,EAAAjH,mBAAAjB,GACAgK,GAAA9B,EAAAjH,SAIAqI,GAAApB,GAEAqC,EAAArC,GAMA,GAHAqC,EAAA,KAGAzG,GACA,OAAA8C,EAIA,GAAAlD,GAAA,CACA,GAAAC,GAGA,IAFA6G,EAAA/I,GAAAgG,KAAAJ,EAAAnG,eAEAmG,EAAAuD,YAEAJ,EAAAG,YAAAtD,EAAAuD,iBAGAJ,EAAAnD,EAcA,OAXA7E,GAAAsI,aAQAN,EAAA7I,GAAA8F,KAAA1H,EAAAyK,GAAA,IAGAA,EAGA,IAAAO,EAAAxH,GAAA8D,EAAAlB,UAAAkB,EAAAD,UAQA,OALA9D,KACAyH,EAAAhQ,EAAAgQ,EAAAhJ,GAAA,KACAgJ,EAAAhQ,EAAAgQ,EAAA/I,GAAA,MAGAb,IAAAE,GAAAF,GAAA/B,WAAA2L,MASAtL,EAAAuL,UAAA,SAAA7F,GACAD,GAAAC,GACA3B,IAAA,GAQA/D,EAAAwL,YAAA,WACAnG,GAAA,KACAtB,IAAA,GAaA/D,EAAAyL,iBAAA,SAAAC,EAAA5B,EAAAzM,GAEAgI,IACAI,OAGA,IAAAkE,EAAAvE,GAAAsG,GACA9B,EAAAxE,GAAA0E,GACA,OAAAJ,GAAAC,EAAAC,EAAAvM,IAUA2C,EAAA2L,QAAA,SAAAnD,EAAAoD,GACA,mBAAAA,IAIAxJ,GAAAoG,GAAApG,GAAAoG,OACAzN,EAAAqH,GAAAoG,GAAAoD,KAUA5L,EAAA6L,WAAA,SAAArD,GACApG,GAAAoG,IACA3N,EAAAuH,GAAAoG,KAUAxI,EAAA8L,YAAA,SAAAtD,GACApG,GAAAoG,KACApG,GAAAoG,QASAxI,EAAA+L,eAAA,WACA3J,OAGApC,EAGAF,IAz5C8DkM,EAAAC,QAAAvT","file":"static/js/54.ba9c44d9b56eb76eb245.js","sourcesContent":["/*! @license DOMPurify 2.3.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.4/LICENSE */\r\n\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.DOMPurify = factory());\r\n}(this, function () { 'use strict';\r\n\r\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\n  var hasOwnProperty = Object.hasOwnProperty,\r\n      setPrototypeOf = Object.setPrototypeOf,\r\n      isFrozen = Object.isFrozen,\r\n      getPrototypeOf = Object.getPrototypeOf,\r\n      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n  var freeze = Object.freeze,\r\n      seal = Object.seal,\r\n      create = Object.create; // eslint-disable-line import/no-mutable-exports\r\n\r\n  var _ref = typeof Reflect !== 'undefined' && Reflect,\r\n      apply = _ref.apply,\r\n      construct = _ref.construct;\r\n\r\n  if (!apply) {\r\n    apply = function apply(fun, thisValue, args) {\r\n      return fun.apply(thisValue, args);\r\n    };\r\n  }\r\n\r\n  if (!freeze) {\r\n    freeze = function freeze(x) {\r\n      return x;\r\n    };\r\n  }\r\n\r\n  if (!seal) {\r\n    seal = function seal(x) {\r\n      return x;\r\n    };\r\n  }\r\n\r\n  if (!construct) {\r\n    construct = function construct(Func, args) {\r\n      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();\r\n    };\r\n  }\r\n\r\n  var arrayForEach = unapply(Array.prototype.forEach);\r\n  var arrayPop = unapply(Array.prototype.pop);\r\n  var arrayPush = unapply(Array.prototype.push);\r\n\r\n  var stringToLowerCase = unapply(String.prototype.toLowerCase);\r\n  var stringMatch = unapply(String.prototype.match);\r\n  var stringReplace = unapply(String.prototype.replace);\r\n  var stringIndexOf = unapply(String.prototype.indexOf);\r\n  var stringTrim = unapply(String.prototype.trim);\r\n\r\n  var regExpTest = unapply(RegExp.prototype.test);\r\n\r\n  var typeErrorCreate = unconstruct(TypeError);\r\n\r\n  function unapply(func) {\r\n    return function (thisArg) {\r\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      return apply(func, thisArg, args);\r\n    };\r\n  }\r\n\r\n  function unconstruct(func) {\r\n    return function () {\r\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n        args[_key2] = arguments[_key2];\r\n      }\r\n\r\n      return construct(func, args);\r\n    };\r\n  }\r\n\r\n  /* Add properties to a lookup table */\r\n  function addToSet(set, array) {\r\n    if (setPrototypeOf) {\r\n      // Make 'in' and truthy checks like Boolean(set.constructor)\r\n      // independent of any properties defined on Object.prototype.\r\n      // Prevent prototype setters from intercepting set as a this value.\r\n      setPrototypeOf(set, null);\r\n    }\r\n\r\n    var l = array.length;\r\n    while (l--) {\r\n      var element = array[l];\r\n      if (typeof element === 'string') {\r\n        var lcElement = stringToLowerCase(element);\r\n        if (lcElement !== element) {\r\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\r\n          if (!isFrozen(array)) {\r\n            array[l] = lcElement;\r\n          }\r\n\r\n          element = lcElement;\r\n        }\r\n      }\r\n\r\n      set[element] = true;\r\n    }\r\n\r\n    return set;\r\n  }\r\n\r\n  /* Shallow clone an object */\r\n  function clone(object) {\r\n    var newObject = create(null);\r\n\r\n    var property = void 0;\r\n    for (property in object) {\r\n      if (apply(hasOwnProperty, object, [property])) {\r\n        newObject[property] = object[property];\r\n      }\r\n    }\r\n\r\n    return newObject;\r\n  }\r\n\r\n  /* IE10 doesn't support __lookupGetter__ so lets'\r\n   * simulate it. It also automatically checks\r\n   * if the prop is function or getter and behaves\r\n   * accordingly. */\r\n  function lookupGetter(object, prop) {\r\n    while (object !== null) {\r\n      var desc = getOwnPropertyDescriptor(object, prop);\r\n      if (desc) {\r\n        if (desc.get) {\r\n          return unapply(desc.get);\r\n        }\r\n\r\n        if (typeof desc.value === 'function') {\r\n          return unapply(desc.value);\r\n        }\r\n      }\r\n\r\n      object = getPrototypeOf(object);\r\n    }\r\n\r\n    function fallbackValue(element) {\r\n      console.warn('fallback value for', element);\r\n      return null;\r\n    }\r\n\r\n    return fallbackValue;\r\n  }\r\n\r\n  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\r\n\r\n  // SVG\r\n  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\r\n\r\n  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\r\n\r\n  // List of SVG elements that are disallowed by default.\r\n  // We still need to know them so that we can do namespace\r\n  // checks properly in case one wants to add them to\r\n  // allow-list.\r\n  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\r\n\r\n  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\r\n\r\n  // Similarly to SVG, we want to know all MathML elements,\r\n  // even those that we disallow by default.\r\n  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\r\n\r\n  var text = freeze(['#text']);\r\n\r\n  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\r\n\r\n  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\r\n\r\n  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\r\n\r\n  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\r\n\r\n  // eslint-disable-next-line unicorn/better-regex\r\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\r\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\r\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\r\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\r\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\r\n  );\r\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\r\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\r\n  );\r\n\r\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\n  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\n  var getGlobal = function getGlobal() {\r\n    return typeof window === 'undefined' ? null : window;\r\n  };\r\n\r\n  /**\r\n   * Creates a no-op policy for internal use only.\r\n   * Don't export this function outside this module!\r\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\r\n   * @param {Document} document The document object (to determine policy name suffix)\r\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\r\n   * are not supported).\r\n   */\r\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\r\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\r\n      return null;\r\n    }\r\n\r\n    // Allow the callers to control the unique policy name\r\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\r\n    // Policy creation with duplicate names throws in Trusted Types.\r\n    var suffix = null;\r\n    var ATTR_NAME = 'data-tt-policy-suffix';\r\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\r\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\r\n    }\r\n\r\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\r\n\r\n    try {\r\n      return trustedTypes.createPolicy(policyName, {\r\n        createHTML: function createHTML(html$$1) {\r\n          return html$$1;\r\n        }\r\n      });\r\n    } catch (_) {\r\n      // Policy creation failed (most likely another DOMPurify script has\r\n      // already run). Skip creating the policy, as this will only cause errors\r\n      // if TT are enforced.\r\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  function createDOMPurify() {\r\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\r\n\r\n    var DOMPurify = function DOMPurify(root) {\r\n      return createDOMPurify(root);\r\n    };\r\n\r\n    /**\r\n     * Version label, exposed for easier checks\r\n     * if DOMPurify is up to date or not\r\n     */\r\n    DOMPurify.version = '2.3.4';\r\n\r\n    /**\r\n     * Array of elements that DOMPurify removed during sanitation.\r\n     * Empty if nothing was removed.\r\n     */\r\n    DOMPurify.removed = [];\r\n\r\n    if (!window || !window.document || window.document.nodeType !== 9) {\r\n      // Not running in a browser, provide a factory function\r\n      // so that you can pass your own Window\r\n      DOMPurify.isSupported = false;\r\n\r\n      return DOMPurify;\r\n    }\r\n\r\n    var originalDocument = window.document;\r\n\r\n    var document = window.document;\r\n    var DocumentFragment = window.DocumentFragment,\r\n        HTMLTemplateElement = window.HTMLTemplateElement,\r\n        Node = window.Node,\r\n        Element = window.Element,\r\n        NodeFilter = window.NodeFilter,\r\n        _window$NamedNodeMap = window.NamedNodeMap,\r\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\r\n        HTMLFormElement = window.HTMLFormElement,\r\n        DOMParser = window.DOMParser,\r\n        trustedTypes = window.trustedTypes;\r\n\r\n\r\n    var ElementPrototype = Element.prototype;\r\n\r\n    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\r\n    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\r\n    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\r\n    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');\r\n\r\n    // As per issue #47, the web-components registry is inherited by a\r\n    // new document created via createHTMLDocument. As per the spec\r\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\r\n    // a new empty registry is used when creating a template contents owner\r\n    // document, so we use that as our parent document to ensure nothing\r\n    // is inherited.\r\n    if (typeof HTMLTemplateElement === 'function') {\r\n      var template = document.createElement('template');\r\n      if (template.content && template.content.ownerDocument) {\r\n        document = template.content.ownerDocument;\r\n      }\r\n    }\r\n\r\n    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\r\n    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';\r\n\r\n    var _document = document,\r\n        implementation = _document.implementation,\r\n        createNodeIterator = _document.createNodeIterator,\r\n        createDocumentFragment = _document.createDocumentFragment,\r\n        getElementsByTagName = _document.getElementsByTagName;\r\n    var importNode = originalDocument.importNode;\r\n\r\n\r\n    var documentMode = {};\r\n    try {\r\n      documentMode = clone(document).documentMode ? document.documentMode : {};\r\n    } catch (_) {}\r\n\r\n    var hooks = {};\r\n\r\n    /**\r\n     * Expose whether this browser supports running the full DOMPurify.\r\n     */\r\n    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;\r\n\r\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\r\n        ERB_EXPR$$1 = ERB_EXPR,\r\n        DATA_ATTR$$1 = DATA_ATTR,\r\n        ARIA_ATTR$$1 = ARIA_ATTR,\r\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\r\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\r\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\r\n\r\n    /**\r\n     * We consider the elements and attributes below to be safe. Ideally\r\n     * don't add any new ones but feel free to remove unwanted ones.\r\n     */\r\n\r\n    /* allowed element names */\r\n\r\n    var ALLOWED_TAGS = null;\r\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));\r\n\r\n    /* Allowed attribute names */\r\n    var ALLOWED_ATTR = null;\r\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));\r\n\r\n    /*\r\n     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\r\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\r\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\r\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\r\n     */\r\n    var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\r\n      tagNameCheck: {\r\n        writable: true,\r\n        configurable: false,\r\n        enumerable: true,\r\n        value: null\r\n      },\r\n      attributeNameCheck: {\r\n        writable: true,\r\n        configurable: false,\r\n        enumerable: true,\r\n        value: null\r\n      },\r\n      allowCustomizedBuiltInElements: {\r\n        writable: true,\r\n        configurable: false,\r\n        enumerable: true,\r\n        value: false\r\n      }\r\n    }));\r\n\r\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\r\n    var FORBID_TAGS = null;\r\n\r\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\r\n    var FORBID_ATTR = null;\r\n\r\n    /* Decide if ARIA attributes are okay */\r\n    var ALLOW_ARIA_ATTR = true;\r\n\r\n    /* Decide if custom data attributes are okay */\r\n    var ALLOW_DATA_ATTR = true;\r\n\r\n    /* Decide if unknown protocols are okay */\r\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\r\n\r\n    /* Output should be safe for common template engines.\r\n     * This means, DOMPurify removes data attributes, mustaches and ERB\r\n     */\r\n    var SAFE_FOR_TEMPLATES = false;\r\n\r\n    /* Decide if document with <html>... should be returned */\r\n    var WHOLE_DOCUMENT = false;\r\n\r\n    /* Track whether config is already set on this instance of DOMPurify. */\r\n    var SET_CONFIG = false;\r\n\r\n    /* Decide if all elements (e.g. style, script) must be children of\r\n     * document.body. By default, browsers might move them to document.head */\r\n    var FORCE_BODY = false;\r\n\r\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\r\n     * string (or a TrustedHTML object if Trusted Types are supported).\r\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\r\n     */\r\n    var RETURN_DOM = false;\r\n\r\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\r\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\r\n    var RETURN_DOM_FRAGMENT = false;\r\n\r\n    /* Try to return a Trusted Type object instead of a string, return a string in\r\n     * case Trusted Types are not supported  */\r\n    var RETURN_TRUSTED_TYPE = false;\r\n\r\n    /* Output should be free from DOM clobbering attacks? */\r\n    var SANITIZE_DOM = true;\r\n\r\n    /* Keep element content when removing element? */\r\n    var KEEP_CONTENT = true;\r\n\r\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\r\n     * of importing it into a new Document and returning a sanitized copy */\r\n    var IN_PLACE = false;\r\n\r\n    /* Allow usage of profiles like html, svg and mathMl */\r\n    var USE_PROFILES = {};\r\n\r\n    /* Tags to ignore content of when KEEP_CONTENT is true */\r\n    var FORBID_CONTENTS = null;\r\n    var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\r\n\r\n    /* Tags that are safe for data: URIs */\r\n    var DATA_URI_TAGS = null;\r\n    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\r\n\r\n    /* Attributes safe for values like \"javascript:\" */\r\n    var URI_SAFE_ATTRIBUTES = null;\r\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\r\n\r\n    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\r\n    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\r\n    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\r\n    /* Document namespace */\r\n    var NAMESPACE = HTML_NAMESPACE;\r\n    var IS_EMPTY_INPUT = false;\r\n\r\n    /* Parsing of strict XHTML documents */\r\n    var PARSER_MEDIA_TYPE = void 0;\r\n    var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\r\n    var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\r\n    var transformCaseFunc = void 0;\r\n\r\n    /* Keep a reference to config to pass to hooks */\r\n    var CONFIG = null;\r\n\r\n    /* Ideally, do not touch anything below this line */\r\n    /* ______________________________________________ */\r\n\r\n    var formElement = document.createElement('form');\r\n\r\n    var isRegexOrFunction = function isRegexOrFunction(testValue) {\r\n      return testValue instanceof RegExp || testValue instanceof Function;\r\n    };\r\n\r\n    /**\r\n     * _parseConfig\r\n     *\r\n     * @param  {Object} cfg optional config literal\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    var _parseConfig = function _parseConfig(cfg) {\r\n      if (CONFIG && CONFIG === cfg) {\r\n        return;\r\n      }\r\n\r\n      /* Shield configuration object from tampering */\r\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\r\n        cfg = {};\r\n      }\r\n\r\n      /* Shield configuration object from prototype pollution */\r\n      cfg = clone(cfg);\r\n\r\n      /* Set configuration parameters */\r\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\r\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\r\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\r\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;\r\n      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;\r\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\r\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\r\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\r\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\r\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\r\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\r\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\r\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\r\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\r\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\r\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\r\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\r\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\r\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\r\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\r\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\r\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\r\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\r\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\r\n      }\r\n\r\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\r\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\r\n      }\r\n\r\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\r\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\r\n      }\r\n\r\n      PARSER_MEDIA_TYPE =\r\n      // eslint-disable-next-line unicorn/prefer-includes\r\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;\r\n\r\n      // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\r\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {\r\n        return x;\r\n      } : stringToLowerCase;\r\n\r\n      if (SAFE_FOR_TEMPLATES) {\r\n        ALLOW_DATA_ATTR = false;\r\n      }\r\n\r\n      if (RETURN_DOM_FRAGMENT) {\r\n        RETURN_DOM = true;\r\n      }\r\n\r\n      /* Parse profile info */\r\n      if (USE_PROFILES) {\r\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));\r\n        ALLOWED_ATTR = [];\r\n        if (USE_PROFILES.html === true) {\r\n          addToSet(ALLOWED_TAGS, html);\r\n          addToSet(ALLOWED_ATTR, html$1);\r\n        }\r\n\r\n        if (USE_PROFILES.svg === true) {\r\n          addToSet(ALLOWED_TAGS, svg);\r\n          addToSet(ALLOWED_ATTR, svg$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n\r\n        if (USE_PROFILES.svgFilters === true) {\r\n          addToSet(ALLOWED_TAGS, svgFilters);\r\n          addToSet(ALLOWED_ATTR, svg$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n\r\n        if (USE_PROFILES.mathMl === true) {\r\n          addToSet(ALLOWED_TAGS, mathMl);\r\n          addToSet(ALLOWED_ATTR, mathMl$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n      }\r\n\r\n      /* Merge configuration parameters */\r\n      if (cfg.ADD_TAGS) {\r\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\r\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\r\n        }\r\n\r\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\r\n      }\r\n\r\n      if (cfg.ADD_ATTR) {\r\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\r\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\r\n        }\r\n\r\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\r\n      }\r\n\r\n      if (cfg.ADD_URI_SAFE_ATTR) {\r\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\r\n      }\r\n\r\n      if (cfg.FORBID_CONTENTS) {\r\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\r\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\r\n        }\r\n\r\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);\r\n      }\r\n\r\n      /* Add #text in case KEEP_CONTENT is set to true */\r\n      if (KEEP_CONTENT) {\r\n        ALLOWED_TAGS['#text'] = true;\r\n      }\r\n\r\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\r\n      if (WHOLE_DOCUMENT) {\r\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\r\n      }\r\n\r\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\r\n      if (ALLOWED_TAGS.table) {\r\n        addToSet(ALLOWED_TAGS, ['tbody']);\r\n        delete FORBID_TAGS.tbody;\r\n      }\r\n\r\n      // Prevent further manipulation of configuration.\r\n      // Not available in IE8, Safari 5, etc.\r\n      if (freeze) {\r\n        freeze(cfg);\r\n      }\r\n\r\n      CONFIG = cfg;\r\n    };\r\n\r\n    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\r\n\r\n    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);\r\n\r\n    /* Keep track of all possible SVG and MathML tags\r\n     * so that we can perform the namespace checks\r\n     * correctly. */\r\n    var ALL_SVG_TAGS = addToSet({}, svg);\r\n    addToSet(ALL_SVG_TAGS, svgFilters);\r\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\r\n\r\n    var ALL_MATHML_TAGS = addToSet({}, mathMl);\r\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param  {Element} element a DOM element whose namespace is being checked\r\n     * @returns {boolean} Return false if the element has a\r\n     *  namespace that a spec-compliant parser would never\r\n     *  return. Return true otherwise.\r\n     */\r\n    var _checkValidNamespace = function _checkValidNamespace(element) {\r\n      var parent = getParentNode(element);\r\n\r\n      // In JSDOM, if we're inside shadow DOM, then parentNode\r\n      // can be null. We just simulate parent in this case.\r\n      if (!parent || !parent.tagName) {\r\n        parent = {\r\n          namespaceURI: HTML_NAMESPACE,\r\n          tagName: 'template'\r\n        };\r\n      }\r\n\r\n      var tagName = stringToLowerCase(element.tagName);\r\n      var parentTagName = stringToLowerCase(parent.tagName);\r\n\r\n      if (element.namespaceURI === SVG_NAMESPACE) {\r\n        // The only way to switch from HTML namespace to SVG\r\n        // is via <svg>. If it happens via any other tag, then\r\n        // it should be killed.\r\n        if (parent.namespaceURI === HTML_NAMESPACE) {\r\n          return tagName === 'svg';\r\n        }\r\n\r\n        // The only way to switch from MathML to SVG is via\r\n        // svg if parent is either <annotation-xml> or MathML\r\n        // text integration points.\r\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\r\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\r\n        }\r\n\r\n        // We only allow elements that are defined in SVG\r\n        // spec. All others are disallowed in SVG namespace.\r\n        return Boolean(ALL_SVG_TAGS[tagName]);\r\n      }\r\n\r\n      if (element.namespaceURI === MATHML_NAMESPACE) {\r\n        // The only way to switch from HTML namespace to MathML\r\n        // is via <math>. If it happens via any other tag, then\r\n        // it should be killed.\r\n        if (parent.namespaceURI === HTML_NAMESPACE) {\r\n          return tagName === 'math';\r\n        }\r\n\r\n        // The only way to switch from SVG to MathML is via\r\n        // <math> and HTML integration points\r\n        if (parent.namespaceURI === SVG_NAMESPACE) {\r\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\r\n        }\r\n\r\n        // We only allow elements that are defined in MathML\r\n        // spec. All others are disallowed in MathML namespace.\r\n        return Boolean(ALL_MATHML_TAGS[tagName]);\r\n      }\r\n\r\n      if (element.namespaceURI === HTML_NAMESPACE) {\r\n        // The only way to switch from SVG to HTML is via\r\n        // HTML integration points, and from MathML to HTML\r\n        // is via MathML text integration points\r\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\r\n          return false;\r\n        }\r\n\r\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\r\n          return false;\r\n        }\r\n\r\n        // Certain elements are allowed in both SVG and HTML\r\n        // namespace. We need to specify them explicitly\r\n        // so that they don't get erronously deleted from\r\n        // HTML namespace.\r\n        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\r\n\r\n        // We disallow tags that are specific for MathML\r\n        // or SVG and should never appear in HTML namespace\r\n        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);\r\n      }\r\n\r\n      // The code should never reach this place (this means\r\n      // that the element somehow got namespace that is not\r\n      // HTML, SVG or MathML). Return false just in case.\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * _forceRemove\r\n     *\r\n     * @param  {Node} node a DOM node\r\n     */\r\n    var _forceRemove = function _forceRemove(node) {\r\n      arrayPush(DOMPurify.removed, { element: node });\r\n      try {\r\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\r\n        node.parentNode.removeChild(node);\r\n      } catch (_) {\r\n        try {\r\n          node.outerHTML = emptyHTML;\r\n        } catch (_) {\r\n          node.remove();\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * _removeAttribute\r\n     *\r\n     * @param  {String} name an Attribute name\r\n     * @param  {Node} node a DOM node\r\n     */\r\n    var _removeAttribute = function _removeAttribute(name, node) {\r\n      try {\r\n        arrayPush(DOMPurify.removed, {\r\n          attribute: node.getAttributeNode(name),\r\n          from: node\r\n        });\r\n      } catch (_) {\r\n        arrayPush(DOMPurify.removed, {\r\n          attribute: null,\r\n          from: node\r\n        });\r\n      }\r\n\r\n      node.removeAttribute(name);\r\n\r\n      // We void attribute values for unremovable \"is\"\" attributes\r\n      if (name === 'is' && !ALLOWED_ATTR[name]) {\r\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\r\n          try {\r\n            _forceRemove(node);\r\n          } catch (_) {}\r\n        } else {\r\n          try {\r\n            node.setAttribute(name, '');\r\n          } catch (_) {}\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * _initDocument\r\n     *\r\n     * @param  {String} dirty a string of dirty markup\r\n     * @return {Document} a DOM, filled with the dirty markup\r\n     */\r\n    var _initDocument = function _initDocument(dirty) {\r\n      /* Create a HTML document */\r\n      var doc = void 0;\r\n      var leadingWhitespace = void 0;\r\n\r\n      if (FORCE_BODY) {\r\n        dirty = '<remove></remove>' + dirty;\r\n      } else {\r\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\r\n        var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\r\n        leadingWhitespace = matches && matches[0];\r\n      }\r\n\r\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {\r\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\r\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\r\n      }\r\n\r\n      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\r\n      /*\r\n       * Use the DOMParser API by default, fallback later if needs be\r\n       * DOMParser not work for svg when has multiple root element.\r\n       */\r\n      if (NAMESPACE === HTML_NAMESPACE) {\r\n        try {\r\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\r\n        } catch (_) {}\r\n      }\r\n\r\n      /* Use createHTMLDocument in case DOMParser is not available */\r\n      if (!doc || !doc.documentElement) {\r\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\r\n        try {\r\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;\r\n        } catch (_) {\r\n          // Syntax error if dirtyPayload is invalid xml\r\n        }\r\n      }\r\n\r\n      var body = doc.body || doc.documentElement;\r\n\r\n      if (dirty && leadingWhitespace) {\r\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\r\n      }\r\n\r\n      /* Work on whole document or just its body */\r\n      if (NAMESPACE === HTML_NAMESPACE) {\r\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\r\n      }\r\n\r\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\r\n    };\r\n\r\n    /**\r\n     * _createIterator\r\n     *\r\n     * @param  {Document} root document/fragment to create iterator for\r\n     * @return {Iterator} iterator instance\r\n     */\r\n    var _createIterator = function _createIterator(root) {\r\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);\r\n    };\r\n\r\n    /**\r\n     * _isClobbered\r\n     *\r\n     * @param  {Node} elm element to check for clobbering attacks\r\n     * @return {Boolean} true if clobbered, false if safe\r\n     */\r\n    var _isClobbered = function _isClobbered(elm) {\r\n      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');\r\n    };\r\n\r\n    /**\r\n     * _isNode\r\n     *\r\n     * @param  {Node} obj object to check whether it's a DOM node\r\n     * @return {Boolean} true is object is a DOM node\r\n     */\r\n    var _isNode = function _isNode(object) {\r\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\r\n    };\r\n\r\n    /**\r\n     * _executeHook\r\n     * Execute user configurable hooks\r\n     *\r\n     * @param  {String} entryPoint  Name of the hook's entry point\r\n     * @param  {Node} currentNode node to work on with the hook\r\n     * @param  {Object} data additional hook parameters\r\n     */\r\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\r\n      if (!hooks[entryPoint]) {\r\n        return;\r\n      }\r\n\r\n      arrayForEach(hooks[entryPoint], function (hook) {\r\n        hook.call(DOMPurify, currentNode, data, CONFIG);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * _sanitizeElements\r\n     *\r\n     * @protect nodeName\r\n     * @protect textContent\r\n     * @protect removeChild\r\n     *\r\n     * @param   {Node} currentNode to check for permission to exist\r\n     * @return  {Boolean} true if node was killed, false if left alive\r\n     */\r\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\r\n      var content = void 0;\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeElements', currentNode, null);\r\n\r\n      /* Check if element is clobbered or can clobber */\r\n      if (_isClobbered(currentNode)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Check if tagname contains Unicode */\r\n      if (stringMatch(currentNode.nodeName, /[\\u0080-\\uFFFF]/)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Now let's check the element's type and name */\r\n      var tagName = transformCaseFunc(currentNode.nodeName);\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('uponSanitizeElement', currentNode, {\r\n        tagName: tagName,\r\n        allowedTags: ALLOWED_TAGS\r\n      });\r\n\r\n      /* Detect mXSS attempts abusing namespace confusion */\r\n      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Mitigate a problem with templates inside select */\r\n      if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Remove element if anything forbids its presence */\r\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\r\n        /* Keep content except for bad-listed elements */\r\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\r\n          var parentNode = getParentNode(currentNode) || currentNode.parentNode;\r\n          var childNodes = getChildNodes(currentNode) || currentNode.childNodes;\r\n\r\n          if (childNodes && parentNode) {\r\n            var childCount = childNodes.length;\r\n\r\n            for (var i = childCount - 1; i >= 0; --i) {\r\n              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\r\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\r\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\r\n        }\r\n\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Check whether element has a valid namespace */\r\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Sanitize element content to be template-safe */\r\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\r\n        /* Get the element's text content */\r\n        content = currentNode.textContent;\r\n        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');\r\n        content = stringReplace(content, ERB_EXPR$$1, ' ');\r\n        if (currentNode.textContent !== content) {\r\n          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\r\n          currentNode.textContent = content;\r\n        }\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeElements', currentNode, null);\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * _isValidAttribute\r\n     *\r\n     * @param  {string} lcTag Lowercase tag name of containing element.\r\n     * @param  {string} lcName Lowercase attribute name.\r\n     * @param  {string} value Attribute value.\r\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\r\n      /* Make sure attribute cannot clobber */\r\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\r\n        return false;\r\n      }\r\n\r\n      /* Allow valid data-* attributes: At least one character after \"-\"\r\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\r\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\r\n          We don't need to check the value; it's always URI safe. */\r\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\r\n        if (\r\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\r\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\r\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\r\n        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\r\n        // Alternative, second condition checks if it's an `is`-attribute, AND\r\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\r\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\r\n          return false;\r\n        }\r\n        /* Check value is safe. First, is attr inert? If so, is safe */\r\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    /**\r\n     * _basicCustomElementCheck\r\n     * checks if at least one dash is included in tagName, and it's not the first char\r\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\r\n     * @param {string} tagName name of the tag of the node to sanitize\r\n     */\r\n    var _basicCustomElementTest = function _basicCustomElementTest(tagName) {\r\n      return tagName.indexOf('-') > 0;\r\n    };\r\n\r\n    /**\r\n     * _sanitizeAttributes\r\n     *\r\n     * @protect attributes\r\n     * @protect nodeName\r\n     * @protect removeAttribute\r\n     * @protect setAttribute\r\n     *\r\n     * @param  {Node} currentNode to sanitize\r\n     */\r\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\r\n      var attr = void 0;\r\n      var value = void 0;\r\n      var lcName = void 0;\r\n      var l = void 0;\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\r\n\r\n      var attributes = currentNode.attributes;\r\n\r\n      /* Check if we have attributes; if not we might have a text node */\r\n\r\n      if (!attributes) {\r\n        return;\r\n      }\r\n\r\n      var hookEvent = {\r\n        attrName: '',\r\n        attrValue: '',\r\n        keepAttr: true,\r\n        allowedAttributes: ALLOWED_ATTR\r\n      };\r\n      l = attributes.length;\r\n\r\n      /* Go backwards over all attributes; safely remove bad ones */\r\n      while (l--) {\r\n        attr = attributes[l];\r\n        var _attr = attr,\r\n            name = _attr.name,\r\n            namespaceURI = _attr.namespaceURI;\r\n\r\n        value = stringTrim(attr.value);\r\n        lcName = transformCaseFunc(name);\r\n\r\n        /* Execute a hook if present */\r\n        hookEvent.attrName = lcName;\r\n        hookEvent.attrValue = value;\r\n        hookEvent.keepAttr = true;\r\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\r\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\r\n        value = hookEvent.attrValue;\r\n        /* Did the hooks approve of the attribute? */\r\n        if (hookEvent.forceKeepAttr) {\r\n          continue;\r\n        }\r\n\r\n        /* Remove attribute */\r\n        _removeAttribute(name, currentNode);\r\n\r\n        /* Did the hooks approve of the attribute? */\r\n        if (!hookEvent.keepAttr) {\r\n          continue;\r\n        }\r\n\r\n        /* Work around a security issue in jQuery 3.0 */\r\n        if (regExpTest(/\\/>/i, value)) {\r\n          _removeAttribute(name, currentNode);\r\n          continue;\r\n        }\r\n\r\n        /* Sanitize attribute content to be template-safe */\r\n        if (SAFE_FOR_TEMPLATES) {\r\n          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');\r\n          value = stringReplace(value, ERB_EXPR$$1, ' ');\r\n        }\r\n\r\n        /* Is `value` valid for this attribute? */\r\n        var lcTag = transformCaseFunc(currentNode.nodeName);\r\n        if (!_isValidAttribute(lcTag, lcName, value)) {\r\n          continue;\r\n        }\r\n\r\n        /* Handle invalid data-* attribute set by try-catching it */\r\n        try {\r\n          if (namespaceURI) {\r\n            currentNode.setAttributeNS(namespaceURI, name, value);\r\n          } else {\r\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\r\n            currentNode.setAttribute(name, value);\r\n          }\r\n\r\n          arrayPop(DOMPurify.removed);\r\n        } catch (_) {}\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeAttributes', currentNode, null);\r\n    };\r\n\r\n    /**\r\n     * _sanitizeShadowDOM\r\n     *\r\n     * @param  {DocumentFragment} fragment to iterate over recursively\r\n     */\r\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\r\n      var shadowNode = void 0;\r\n      var shadowIterator = _createIterator(fragment);\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\r\n\r\n      while (shadowNode = shadowIterator.nextNode()) {\r\n        /* Execute a hook if present */\r\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\r\n\r\n        /* Sanitize tags and elements */\r\n        if (_sanitizeElements(shadowNode)) {\r\n          continue;\r\n        }\r\n\r\n        /* Deep shadow DOM detected */\r\n        if (shadowNode.content instanceof DocumentFragment) {\r\n          _sanitizeShadowDOM(shadowNode.content);\r\n        }\r\n\r\n        /* Check attributes, sanitize if necessary */\r\n        _sanitizeAttributes(shadowNode);\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\r\n    };\r\n\r\n    /**\r\n     * Sanitize\r\n     * Public method providing core sanitation functionality\r\n     *\r\n     * @param {String|Node} dirty string or DOM node\r\n     * @param {Object} configuration object\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    DOMPurify.sanitize = function (dirty, cfg) {\r\n      var body = void 0;\r\n      var importedNode = void 0;\r\n      var currentNode = void 0;\r\n      var oldNode = void 0;\r\n      var returnNode = void 0;\r\n      /* Make sure we have a string to sanitize.\r\n        DO NOT return early, as this will return the wrong type if\r\n        the user has requested a DOM object rather than a string */\r\n      IS_EMPTY_INPUT = !dirty;\r\n      if (IS_EMPTY_INPUT) {\r\n        dirty = '<!-->';\r\n      }\r\n\r\n      /* Stringify, in case dirty is an object */\r\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (typeof dirty.toString !== 'function') {\r\n          throw typeErrorCreate('toString is not a function');\r\n        } else {\r\n          dirty = dirty.toString();\r\n          if (typeof dirty !== 'string') {\r\n            throw typeErrorCreate('dirty is not a string, aborting');\r\n          }\r\n        }\r\n      }\r\n\r\n      /* Check we can run. Otherwise fall back or ignore */\r\n      if (!DOMPurify.isSupported) {\r\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\r\n          if (typeof dirty === 'string') {\r\n            return window.toStaticHTML(dirty);\r\n          }\r\n\r\n          if (_isNode(dirty)) {\r\n            return window.toStaticHTML(dirty.outerHTML);\r\n          }\r\n        }\r\n\r\n        return dirty;\r\n      }\r\n\r\n      /* Assign config vars */\r\n      if (!SET_CONFIG) {\r\n        _parseConfig(cfg);\r\n      }\r\n\r\n      /* Clean up removed elements */\r\n      DOMPurify.removed = [];\r\n\r\n      /* Check if dirty is correctly typed for IN_PLACE */\r\n      if (typeof dirty === 'string') {\r\n        IN_PLACE = false;\r\n      }\r\n\r\n      if (IN_PLACE) ; else if (dirty instanceof Node) {\r\n        /* If dirty is a DOM element, append to an empty document to avoid\r\n           elements being stripped by the parser */\r\n        body = _initDocument('<!---->');\r\n        importedNode = body.ownerDocument.importNode(dirty, true);\r\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\r\n          /* Node is already a body, use as is */\r\n          body = importedNode;\r\n        } else if (importedNode.nodeName === 'HTML') {\r\n          body = importedNode;\r\n        } else {\r\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\r\n          body.appendChild(importedNode);\r\n        }\r\n      } else {\r\n        /* Exit directly if we have nothing to do */\r\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\r\n        // eslint-disable-next-line unicorn/prefer-includes\r\n        dirty.indexOf('<') === -1) {\r\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\r\n        }\r\n\r\n        /* Initialize the document to work on */\r\n        body = _initDocument(dirty);\r\n\r\n        /* Check we have a DOM node from the data */\r\n        if (!body) {\r\n          return RETURN_DOM ? null : emptyHTML;\r\n        }\r\n      }\r\n\r\n      /* Remove first element node (ours) if FORCE_BODY is set */\r\n      if (body && FORCE_BODY) {\r\n        _forceRemove(body.firstChild);\r\n      }\r\n\r\n      /* Get node iterator */\r\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\r\n\r\n      /* Now start iterating over the created document */\r\n      while (currentNode = nodeIterator.nextNode()) {\r\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\r\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\r\n          continue;\r\n        }\r\n\r\n        /* Sanitize tags and elements */\r\n        if (_sanitizeElements(currentNode)) {\r\n          continue;\r\n        }\r\n\r\n        /* Shadow DOM detected, sanitize it */\r\n        if (currentNode.content instanceof DocumentFragment) {\r\n          _sanitizeShadowDOM(currentNode.content);\r\n        }\r\n\r\n        /* Check attributes, sanitize if necessary */\r\n        _sanitizeAttributes(currentNode);\r\n\r\n        oldNode = currentNode;\r\n      }\r\n\r\n      oldNode = null;\r\n\r\n      /* If we sanitized `dirty` in-place, return it. */\r\n      if (IN_PLACE) {\r\n        return dirty;\r\n      }\r\n\r\n      /* Return sanitized string or DOM */\r\n      if (RETURN_DOM) {\r\n        if (RETURN_DOM_FRAGMENT) {\r\n          returnNode = createDocumentFragment.call(body.ownerDocument);\r\n\r\n          while (body.firstChild) {\r\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\r\n            returnNode.appendChild(body.firstChild);\r\n          }\r\n        } else {\r\n          returnNode = body;\r\n        }\r\n\r\n        if (ALLOWED_ATTR.shadowroot) {\r\n          /*\r\n            AdoptNode() is not used because internal state is not reset\r\n            (e.g. the past names map of a HTMLFormElement), this is safe\r\n            in theory but we would rather not risk another attack vector.\r\n            The state that is cloned by importNode() is explicitly defined\r\n            by the specs.\r\n          */\r\n          returnNode = importNode.call(originalDocument, returnNode, true);\r\n        }\r\n\r\n        return returnNode;\r\n      }\r\n\r\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\r\n\r\n      /* Sanitize final string template-safe */\r\n      if (SAFE_FOR_TEMPLATES) {\r\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');\r\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');\r\n      }\r\n\r\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\r\n    };\r\n\r\n    /**\r\n     * Public method to set the configuration once\r\n     * setConfig\r\n     *\r\n     * @param {Object} cfg configuration object\r\n     */\r\n    DOMPurify.setConfig = function (cfg) {\r\n      _parseConfig(cfg);\r\n      SET_CONFIG = true;\r\n    };\r\n\r\n    /**\r\n     * Public method to remove the configuration\r\n     * clearConfig\r\n     *\r\n     */\r\n    DOMPurify.clearConfig = function () {\r\n      CONFIG = null;\r\n      SET_CONFIG = false;\r\n    };\r\n\r\n    /**\r\n     * Public method to check if an attribute value is valid.\r\n     * Uses last set config, if any. Otherwise, uses config defaults.\r\n     * isValidAttribute\r\n     *\r\n     * @param  {string} tag Tag name of containing element.\r\n     * @param  {string} attr Attribute name.\r\n     * @param  {string} value Attribute value.\r\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\r\n     */\r\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\r\n      /* Initialize shared config vars if necessary. */\r\n      if (!CONFIG) {\r\n        _parseConfig({});\r\n      }\r\n\r\n      var lcTag = transformCaseFunc(tag);\r\n      var lcName = transformCaseFunc(attr);\r\n      return _isValidAttribute(lcTag, lcName, value);\r\n    };\r\n\r\n    /**\r\n     * AddHook\r\n     * Public method to add DOMPurify hooks\r\n     *\r\n     * @param {String} entryPoint entry point for the hook to add\r\n     * @param {Function} hookFunction function to execute\r\n     */\r\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\r\n      if (typeof hookFunction !== 'function') {\r\n        return;\r\n      }\r\n\r\n      hooks[entryPoint] = hooks[entryPoint] || [];\r\n      arrayPush(hooks[entryPoint], hookFunction);\r\n    };\r\n\r\n    /**\r\n     * RemoveHook\r\n     * Public method to remove a DOMPurify hook at a given entryPoint\r\n     * (pops it from the stack of hooks if more are present)\r\n     *\r\n     * @param {String} entryPoint entry point for the hook to remove\r\n     */\r\n    DOMPurify.removeHook = function (entryPoint) {\r\n      if (hooks[entryPoint]) {\r\n        arrayPop(hooks[entryPoint]);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * RemoveHooks\r\n     * Public method to remove all DOMPurify hooks at a given entryPoint\r\n     *\r\n     * @param  {String} entryPoint entry point for the hooks to remove\r\n     */\r\n    DOMPurify.removeHooks = function (entryPoint) {\r\n      if (hooks[entryPoint]) {\r\n        hooks[entryPoint] = [];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * RemoveAllHooks\r\n     * Public method to remove all DOMPurify hooks\r\n     *\r\n     */\r\n    DOMPurify.removeAllHooks = function () {\r\n      hooks = {};\r\n    };\r\n\r\n    return DOMPurify;\r\n  }\r\n\r\n  var purify = createDOMPurify();\r\n\r\n  return purify;\r\n\r\n}));\r\n//# sourceMappingURL=purify.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/dompurify/dist/purify.js\n// module id = OvQW\n// module chunks = 54"],"sourceRoot":""}